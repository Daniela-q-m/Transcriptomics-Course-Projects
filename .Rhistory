df
df<-data.frame(col.name.1=c1,col.name.2=c2)
#1 Creating Dataframes
empty<-data.frame()
c1<-1:10
c1
letters #Vector of the alphabet
c2<-letters[1:10]
c2
df<-data.frame(col.name.1=c1,col.name.2=c2)
df
#d2<-read.csv('some_file.csv') #reading to csv
#write.csv(df,file='saved_df.csv')#writing to csv
#df2<-read.csv('saved_df.csv')#reading the new file to csv
#3 getting information about the data frame
nrow(df)
ncol(df)
colnames(df)
rownames(df)
str(df)
summary(df)
#Referencing cells
df[[5,2]]
df[[5,'col.name.2']]
df[[2,'col.name.1']]<-9999
#5 referencing rows
df[1,] #with names
mtcars
head(mtcars)
#Referencing Columns
mtcars$mpg
mtcars[,'mpg']
mtcars[['mpg']]
mtcars['mpg'] #this returns data frame instead of the vector of values
head(mtcars[c('mpg','cyl')])
#Overview of data operations part 2
df2<-data.frame(col.name.1=2000,col.name.2='new')
df2
df
dfnew<-rbind(df,df2)
dfnew
df$newcol<-2*df$col.name.1
df
df$newcol.coy<-df$newcol
df
df$newcol.copy<-df$newcol
df
head(df)
df[,'newcol.copy2']<df$newcol
name.1
df
df$newcol.copy<-df$newcol
df
head(df)
df[,'newcol.copy2']<df$newcol
df[,'newcol.copy2']<-df$newcol
df
#setting column names
colnames()
#setting column names
colnames(df)
colnames(df)<c('1','2','3','4','5')
colnames(df)<-c('1','2','3','4','5')
head(df)
head(df)
colnames(df)[1]<-'New Col Name'
head(df)
#selection multiple rows
df[1:10 ,]
df[1:3,]
head(df, 7)
#Conditional selection
head(mtcars)
mtcars[mtcars$mpg>20]
mtcars[mtcars$mpg>20,]
mtcars[mtcars$mpg &mtcars$cyl==6,]
mtcars[mtcars$mpg &mtcars$cyl==6,c('mpg','cyl','hp')]
subset(mtcars, mpg>20 & cylinders=6)
subset(mtcars, mpg>20 & cylinders==6)
cwd
print(pwd)
print(cwd)
det(wd)
get(wd)
getwd()
library(readr)
Anonymous_Salary_Survey_Responses_Form_Responses_1 <- read_csv("Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv")
View(Anonymous_Salary_Survey_Responses_Form_Responses_1)
read.csv('Anonymous Salary Survey (Responses) - Form Responses 1.csv')
getwd()
read.csv(Anonymous Salary Survey (Responses) - Form Responses 1.csv)
read.csv('/Users/danielaquijano/Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv')
df
Anonymous_Responses<-read.csv('/Users/danielaquijano/Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv')
df-<-data.frame(Anonymous_Responses)
df
Anonymous_Responses<-read.csv('/Users/danielaquijano/Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv')
df<-data.frame(Anonymous_Responses)
df
head(df)
df[1,]
df[,1]
df[,2]
Salary<-df[,10]
Years_exp<-df[,3]
# Change point shape (pch = 19) and remove frame.
plot(Years_Exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19, frame = TRUE)
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19, frame = TRUE)
# Change point shape (pch = 19) and remove frame.
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 25, frame = TRUE)
# Change point shape (pch = 19) and remove frame.
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 35, frame = TRUE)
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 35, frame = TRUE)
# Change point shape (pch = 19) and remove frame.
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19, frame = TRUE)
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19, frame = TRUE)
Cities<-df[,8]
Years_exp<-df[,3]
Salary<-df[,10]
getwd()
Anonymous_Responses<-read.csv('/Users/danielaquijano/Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv')
df<-data.frame(Anonymous_Responses)
head(df)
getwd()
Anonymous_Responses<-read.csv('/Users/danielaquijano/Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv')
df<-data.frame(Anonymous_Responses)
head(df)
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19, frame = TRUE)
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19)
df$Annual.Base.Salary..if.hourly..please.convert.to.annual.= as.numeric(gsub("\\$", "", df$Salary))
df$Annual.Base.Salary..if.hourly..please.convert.to.annual.= as.numeric(gsub("\\$", "", df$Annual.Base.Salary..if.hourly..please.convert.to.annual.))
head(df)
print(Salary)
print(avg(Salary))
print(mean(Salary))
df
df
getwd()
Anonymous_Responses<-read.csv('/Users/danielaquijano/Documents/NYU MASTERS/Anonymous Salary Survey (Responses) - Form Responses 1.csv')
df<-data.frame(Anonymous_Responses)
head(df)
df[]<-lapply(df,gsub,pattern=" $",fixed=TRUE,replacement="")
df
df[]<-lapply(df,gsub,pattern="$",fixed=TRUE,replacement="")
df
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19)
```{r}
df[]<-lapply(df,gsub,pattern="$",fixed=TRUE,replacement="")
df
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19)
Cities<-df[,8]
Years_exp<-df[,3]
Salary<-df
Industry<-df[,4]
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19)
length(Years_exp)
length(Salary)
Cities<-df[,8]
Years_exp<-df[,3]
Salary<-df[,10]
Industry<-df[,4]
plot(Years_exp, Salary, main = "Years of Experience vs Salary",
xlab = "Years of Experience", ylab = "Salary",
pch = 19)
#Selecting multiple Column Names
mtcars
mtcars[c(1,2,3)]
mtcars[c('mpg','cyl')]
#Dealing with missing data
is.na(mtcars)
print(is.na(mtcars))
any(is.na(df))
any(is.na(mtcars))
any(is.na(mtcars$mpg))
DF<-data.frame(rownames=Name, Age,Weight, Sex)
print(DF)
Name<-c('Sam','Frank','Amy')
Age<-c(22,25,26)
Weight<-(150,165,120)
Sex<-c('M','M','F')
DF<-data.frame(rownames=Name, Age,Weight, Sex)
print(DF)
Name<-c('Sam','Frank','Amy')
Age<-c(22,25,26)
Weight<-c(150,165,120)
Sex<-c('M','M','F')
DF<-data.frame(rownames=Name, Age,Weight, Sex)
print(DF)
DF<-data.frame(row.names=Name, Age,Weight, Sex)
print(DF)
#Check if mtcars is a dataframe
head(mtcars)
is.data.frame(mtcars)
as.data.frame(mat)
mat<(matrix(1:25.nrow=5))
as.data.frame(mat)
mat<-(matrix(1:25.nrow=5))
as.data.frame(mat)
mat<-(matrix(1:25,nrow=5))
as.data.frame(mat)
as.data.frame(mat)
#DataFramess Training Exercises
#1. Recreate the dataframe by using vectors and data.frame function
Name<-c('Sam','Frank','Amy')
df<-mtcars
df
df$mpg
mean(df$mpg)
#7 Find rows where all cars have 6 cylinder
df[df$cyl==6,]
#8Select the columns am, gear and carb
df[,c('am','gear','carb')]
head(df)
df$performance<-df$hp/df$wt
head(df)
#10 Rounding
df$performance<-round(df$performance,digits=2)
df$performance<-round(df$performance,digits=2)
head(df)
#6
df<-mtcars
#11 avg mpg for cars that have more than 100 hp and a wt value of mroe than 2.5
subset(df,hp>100 & wt>2.5)
#11 avg mpg for cars that have more than 100 hp and a wt value of mroe than 2.5
subset(df,hp>100 & wt>2.5)$mpg
mean(subset(df,hp>100 & wt>2.5)$mpg)
df['Hornet Sportabout',]
install.packages("BioCManager")
install.packages("BiocManager")
BiocManager::install("GOstats")
BiocManager::install("GEOquery")
BiocManager::install("GO.db")
BiocManager::install("Category")
BiocManager::install("ath1121501.db")
BiocManager::install("AnnotationDbi")
BiocManager::install("annotate")
library(GEOquery)
library(GEOquery)
BiocManager::install("GEOquery")
library("GEOquery")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.10.tar.gz", repos = NULL, type="source")
BiocManager::install("GEOquery")
library(GEOquery)
install.packages("[URL]", repo=NULL, type="source")
e.g install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.0.tar.gz", repo=NULL, type="source")
install.packages("[URL]", repo=NULL, type="source")
e.g install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/#:~:text=%C2%A0-,rlang_1.0.0.tar.gz,-2022%2D01%2D26", repo=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/#:~:text=%C2%A0-,rlang_1.0.0.tar.gz,-2022%2D01%2D26", repo=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.0.tar.gz", repo=NULL, type="source")
BiocManager::install("GEOquery")
library(GEOquery)
rownames(readcount)<-rownames(df)
#Load the file GSE124548.raw.txt and create a new dataframe with just the columns with the raw counts for healthy (HC) and CF patients before treatment (Base) and call it readcount. Use the third column (EntrezID) in the original file as the rownames of readcount.
df=read.table('/Users/danielaquijano/Documents/GitHub/Transcriptomics-Course-Projects/source_files/GSE124548.raw.fixed.txt', sep = '\t',header =TRUE)
df
library(dplyr)
HC=select(df, contains('HC', ignore.case = TRUE, vars = NULL))
Base=select(df, contains('Base', ignore.case = TRUE, vars = NULL))
readcount=cbind(HC, Base)
readcount
rownames(readcount)<-rownames(df)
readcount
rownames(readcount)<-df$EntrezID
readcount
rownames(readcount)<-df$EntrezID
readcount
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
